const index = "import { Field } from 'solid-form-handler';\nimport { Component, JSX, Show, splitProps } from 'solid-js';\n\nexport type FileInputProps = Omit<\n  JSX.InputHTMLAttributes<HTMLInputElement>,\n  'type' | 'value'\n> &\n  FieldProps & { label?: string } & (\n    | { multiple?: false; value?: File }\n    | { multiple?: true; value?: File[] }\n  );\n\nexport const FileInput: Component<FileInputProps> = (props) => {\n  let fileInput: HTMLInputElement;\n  const [local] = splitProps(props, [\n    'classList',\n    'label',\n    'formHandler',\n    'multiple',\n    'value',\n  ]);\n\n  return (\n    <Field\n      {...props}\n      mode=\"file-input\"\n      render={(field) => (\n        <div classList={local.classList}>\n          <Show when={local.label}>\n            <label class=\"form-label\" for={field.props.id}>\n              {local.label}\n            </label>\n          </Show>\n          <input\n            ref={fileInput}\n            multiple={local.multiple}\n            type=\"file\"\n            classList={{ 'd-none': true }}\n            onChange={field.props.onChange}\n          />\n          <button\n            onBlur={field.props.onBlur}\n            classList={{ 'is-invalid': field.helpers.error }}\n            type=\"button\"\n            class=\"form-control bg-light file-btn d-flex p-0 overflow-hidden\"\n            onClick={() => fileInput?.click()}\n          >\n            <span class=\"p-2 border-end\">Choose File</span>\n            <span class=\"p-2\">\n              <Show\n                when={local.multiple && field.props.value.length}\n                fallback={field.props.value.name}\n              >\n                {field.props.value.length} files chosen.\n              </Show>\n            </span>\n          </button>\n          <Show when={field.helpers.error}>\n            <div class=\"invalid-feedback\">{field.helpers.errorMessage}</div>\n          </Show>\n        </div>\n      )}\n    />\n  );\n};\n";

export { index as default };
