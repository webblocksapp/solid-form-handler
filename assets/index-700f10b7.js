const index = "import { FieldProps, Field } from 'solid-form-handler';\nimport { Component, For, Show } from 'solid-js';\n\ntype SelectableOption = { value: string | number; label: string };\n\nexport type RadiosProps = FieldProps & {\n  label?: string;\n  options?: Array<SelectableOption>;\n  value?: string | number;\n  triggers?: string[];\n};\n\nexport const Radios: Component<RadiosProps> = (props) => {\n  return (\n    <Field\n      {...props}\n      mode=\"radio-group\"\n      render={(field) => (\n        <div>\n          <Show when={props.label}>\n            <label>{props.label}</label>\n          </Show>\n          <div classList={{ 'is-invalid': field.helpers.error }}>\n            <For each={props.options}>\n              {(option, i) => (\n                <div\n                  classList={{\n                    'form-check': true,\n                    'is-invalid': field.helpers.error,\n                  }}\n                >\n                  <input\n                    {...field.props}\n                    id={`${field.props.id}-${i()}`}\n                    checked={field.helpers.isChecked(option.value)}\n                    value={option.value}\n                    class=\"form-check-input\"\n                    classList={{ 'is-invalid': field.helpers.error }}\n                    type=\"radio\"\n                  />\n                  <Show when={option.label}>\n                    <label\n                      class=\"form-check-label\"\n                      for={`${field.props.id}-${i()}`}\n                    >\n                      {option.label}\n                    </label>\n                  </Show>\n                </div>\n              )}\n            </For>\n          </div>\n          <Show when={field.helpers.error}>\n            <div class=\"invalid-feedback\">{field.helpers.errorMessage}</div>\n          </Show>\n        </div>\n      )}\n    />\n  );\n};\n";

export { index as default };
