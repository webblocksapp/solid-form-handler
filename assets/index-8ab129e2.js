const index = "import { Component, Show } from 'solid-js';\nimport { Field, useFormHandler } from 'solid-form-handler';\nimport { yupSchema } from 'solid-form-handler/yup';\nimport * as yup from 'yup';\n\ntype Schema = {\n  acceptPolicy: boolean;\n  accountStatus: 'active' | 'inactive';\n};\n\nconst schema: yup.Schema<Schema> = yup.object({\n  acceptPolicy: yup\n    .boolean()\n    .required()\n    .oneOf([true], 'Policy must be accepted')\n    .typeError('Accept policy is required'),\n  accountStatus: yup\n    .mixed<Schema['accountStatus']>()\n    .oneOf(['active', 'inactive'])\n    .required()\n    .default('inactive'),\n});\n\nexport const Form: Component = () => {\n  const formHandler = useFormHandler<Schema>(yupSchema(schema));\n  const { formData } = formHandler;\n\n  const submit = async (event: Event) => {\n    event.preventDefault();\n    try {\n      await formHandler.validateForm();\n      alert('Data sent with success: ' + JSON.stringify(formData()));\n      formHandler.resetForm();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const reset = () => {\n    formHandler.resetForm();\n  };\n\n  const fill = () => {\n    formHandler.fillForm({ acceptPolicy: true, accountStatus: 'active' });\n  };\n\n  return (\n    <form autocomplete=\"off\" onSubmit={submit}>\n      <h4 class=\"mb-3\">Using yup schema</h4>\n      <div class=\"mb-3\">\n        <Field\n          name=\"acceptPolicy\"\n          mode=\"checkbox\"\n          formHandler={formHandler}\n          render={(field) => (\n            <>\n              <div\n                class=\"form-check\"\n                classList={{\n                  'is-invalid': field.helpers.error,\n                }}\n              >\n                <input\n                  {...field.props}\n                  type=\"checkbox\"\n                  class=\"form-check-input\"\n                  classList={{\n                    'is-invalid': field.helpers.error,\n                  }}\n                />\n                <label class=\"form-check-label\" for={field.props.id}>\n                  Accept policy.\n                </label>\n              </div>\n              <Show when={field.helpers.error}>\n                <div class=\"invalid-feedback\">{field.helpers.errorMessage}</div>\n              </Show>\n            </>\n          )}\n        />\n      </div>\n      <div class=\"mb-3\">\n        <Field\n          name=\"accountStatus\"\n          mode=\"checkbox\"\n          value=\"active\"\n          uncheckedValue=\"inactive\"\n          formHandler={formHandler}\n          render={(field) => (\n            <>\n              <div\n                class=\"form-check\"\n                classList={{\n                  'is-invalid': field.helpers.error,\n                }}\n              >\n                <input\n                  {...field.props}\n                  type=\"checkbox\"\n                  class=\"form-check-input\"\n                  classList={{\n                    'is-invalid': field.helpers.error,\n                  }}\n                />\n                <label class=\"form-check-label\" for={field.props.id}>\n                  Account status: {formHandler.getFieldValue(field.props.name)}\n                </label>\n              </div>\n              <Show when={field.helpers.error}>\n                <div class=\"invalid-feedback\">{field.helpers.errorMessage}</div>\n              </Show>\n            </>\n          )}\n        />\n      </div>\n      <div class=\"mb-3\">\n        <button class=\"btn btn-primary me-2\">Submit</button>\n        <button class=\"btn btn-primary me-2\" onClick={reset} type=\"button\">\n          Reset\n        </button>\n        <button class=\"btn btn-primary me-2\" onClick={fill} type=\"button\">\n          Fill\n        </button>\n      </div>\n      <p>\n        <b>Form data:</b>\n      </p>\n      <pre class=\"mt-3 border bg-light p-3\">\n        <code>{JSON.stringify(formData(), null, 2)}</code>\n      </pre>\n    </form>\n  );\n};\n";

export { index as default };
