{"version":3,"file":"index-8e6c511f.js","sources":["../../src/components/suid/TextInput/index.tsx?raw"],"sourcesContent":["export default \"import { FormHandler } from '@interfaces';\\nimport { Component, createEffect, createUniqueId, splitProps } from 'solid-js';\\nimport { createStore } from 'solid-js/store';\\nimport SuidTextInput, {\\n  TextFieldProps as SuidTextInputProps,\\n} from '@suid/material/TextField';\\nimport FormHelperText from '@suid/material/FormHelperText';\\nimport FormGroup from '@suid/material/FormGroup';\\n\\nexport type TextInputProps = SuidTextInputProps & {\\n  errorMessage?: string;\\n  formHandler?: FormHandler;\\n  triggers?: string[];\\n};\\n\\nexport const TextInput: Component<TextInputProps> = (props) => {\\n  /**\\n   * Props are divided in two groups:\\n   * - local: newer or extended/computed props.\\n   * - rest: remaining inherited props applied to the original component.\\n   */\\n  const [local, rest] = splitProps(props, [\\n    'error',\\n    'errorMessage',\\n    'formHandler',\\n    'helperText',\\n    'id',\\n    'onBlur',\\n    'onChange',\\n    'value',\\n    'triggers',\\n  ]);\\n\\n  /**\\n   * Derived/computed states from props.\\n   */\\n  const [store, setStore] = createStore({\\n    errorMessage: '',\\n    error: false,\\n    value: '',\\n    id: '',\\n  });\\n\\n  /**\\n   * Extended onInput event.\\n   */\\n  const onChange: TextInputProps['onChange'] = (event, value) => {\\n    //Form handler prop sets and validate the value onInput.\\n    local.formHandler?.setFieldValue?.(rest.name, event.target.value, {\\n      htmlElement: event.currentTarget,\\n      validateOn: [event.type],\\n    });\\n\\n    //onChange prop is preserved\\n    local?.onChange?.(event, value);\\n  };\\n\\n  /**\\n   * Extended onBlur event.\\n   */\\n  const onBlur: TextInputProps['onBlur'] = (event) => {\\n    //Form handler prop validate and touch the field.\\n    local.formHandler?.validateField?.(rest.name, { validateOn: [event.type] });\\n    local.formHandler?.touchField?.(rest.name);\\n\\n    //onBlur prop is preserved\\n    local?.onBlur?.(event);\\n  };\\n\\n  /**\\n   * Controls component's value.\\n   */\\n  createEffect(() => {\\n    /**\\n     * If formHandler is defined, value is controlled by\\n     * the same component, if no, by the value prop.\\n     */\\n    setStore(\\n      'value',\\n      local.formHandler\\n        ? local.formHandler?.getFieldValue?.(rest.name)\\n        : local.value\\n    );\\n  });\\n\\n  /**\\n   * Updates error message signal according to the given prop or form handler state.\\n   */\\n  createEffect(() => {\\n    setStore(\\n      'errorMessage',\\n      local.errorMessage || local.formHandler?.getFieldError?.(rest.name) || ''\\n    );\\n  });\\n\\n  /**\\n   * Updates error flag signal according to the given prop or form handler state.\\n   */\\n  createEffect(() => {\\n    setStore(\\n      'error',\\n      local.error || local.formHandler?.fieldHasError?.(rest.name) || false\\n    );\\n  });\\n\\n  /**\\n   * Initializes the form field unique id.\\n   */\\n  createEffect(() => {\\n    setStore('id', local.id || createUniqueId());\\n  });\\n\\n  /**\\n   * Initializes component's default value\\n   */\\n  createEffect(() => {\\n    local.formHandler?.setFieldDefaultValue?.(rest.name, local.value);\\n  });\\n\\n  /**\\n   * Triggers dependant validations\\n   */\\n  createEffect(() => {\\n    local?.formHandler?.setFieldTriggers?.(rest.name, local.triggers);\\n  });\\n\\n  return (\\n    <FormGroup>\\n      <SuidTextInput\\n        {...rest}\\n        error={store.error}\\n        id={store.id}\\n        onChange={onChange}\\n        onBlur={onBlur}\\n        value={store.value}\\n      />\\n      {local.helperText && <FormHelperText>{local.helperText}</FormHelperText>}\\n      {store.error && (\\n        <FormHelperText error={store.error}>\\n          {store.errorMessage}\\n        </FormHelperText>\\n      )}\\n    </FormGroup>\\n  );\\n};\\n\""],"names":["index"],"mappings":"AAAA,MAAAA,EAAe}