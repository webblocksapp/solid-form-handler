const index = "import { Component, For, Show } from 'solid-js';\nimport { Field, useFormHandler } from 'solid-form-handler';\nimport { zodSchema } from 'solid-form-handler/zod';\nimport { z } from 'zod';\n\ntype SelectableOption = {\n  value: number | string;\n  label: string;\n};\n\nconst schema = z.object({\n  ageRange: z.string().min(1, 'Age range is required'),\n});\n\nconst ageRanges: SelectableOption[] = [\n  { value: '18-30', label: 'From 18 to 30' },\n  { value: '31-42', label: 'From 31 to 42' },\n  { value: '43-55', label: 'From 43 to 55' },\n  { value: '56-70', label: 'From 56 to 70' },\n];\n\nexport const Form: Component = () => {\n  const formHandler = useFormHandler(zodSchema(schema));\n  const { formData } = formHandler;\n\n  const submit = async (event: Event) => {\n    event.preventDefault();\n    try {\n      await formHandler.validateForm();\n      alert('Data sent with success: ' + JSON.stringify(formData()));\n      formHandler.resetForm();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const reset = () => {\n    formHandler.resetForm();\n  };\n\n  const fill = () => {\n    formHandler.fillForm({ ageRange: '18-30' });\n  };\n\n  return (\n    <form autocomplete=\"off\" onSubmit={submit}>\n      <h4>Using zod schema</h4>\n      <div class=\"mb-3\">\n        <Field\n          mode=\"radio-group\"\n          name=\"ageRange\"\n          formHandler={formHandler}\n          render={(field) => (\n            <>\n              <For each={ageRanges}>\n                {(ageRange, i) => (\n                  <div\n                    class=\"form-check\"\n                    classList={{\n                      'is-invalid': field.helpers.error,\n                    }}\n                  >\n                    <input\n                      {...field.props}\n                      checked={field.helpers.isChecked(ageRange.value)}\n                      class=\"form-check-input\"\n                      classList={{\n                        'is-invalid': field.helpers.error,\n                      }}\n                      id={`${field.props.id}-${i()}`}\n                      value={ageRange.value}\n                      type=\"radio\"\n                    />\n                    <label\n                      for={`${field.props.id}-${i()}`}\n                      class=\"form-check-label\"\n                    >\n                      {ageRange.label}\n                    </label>\n                  </div>\n                )}\n              </For>\n              <Show when={field.helpers.error}>\n                <div class=\"invalid-feedback\">{field.helpers.errorMessage}</div>\n              </Show>\n            </>\n          )}\n        />\n      </div>\n      <div class=\"mb-3\">\n        <button class=\"btn btn-primary me-2\">Submit</button>\n        <button class=\"btn btn-primary me-2\" onClick={reset} type=\"button\">\n          Reset\n        </button>\n        <button class=\"btn btn-primary me-2\" onClick={fill} type=\"button\">\n          Fill\n        </button>\n      </div>\n      <p>\n        <b>Form data:</b>\n      </p>\n      <pre class=\"mt-3 border bg-light p-3\">\n        <code>{JSON.stringify(formData(), null, 2)}</code>\n      </pre>\n    </form>\n  );\n};\n";

export { index as default };
