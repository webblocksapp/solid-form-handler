const index = "import {\n  Component,\n  createEffect,\n  createSignal,\n  JSX,\n  JSXElement,\n  onCleanup,\n  onMount,\n  splitProps,\n} from 'solid-js';\nimport { useSidebarContext } from '@components';\nimport './index.css';\n\nexport interface SidebarProps extends JSX.HTMLAttributes<HTMLDivElement> {\n  children: JSXElement;\n}\n\nexport const Sidebar: Component<SidebarProps> = (props) => {\n  const [local, rest] = splitProps(props, ['classList']);\n  const [overSidebar, setOverSidebar] = createSignal(false);\n  const sidebar = useSidebarContext();\n  let ref: HTMLDivElement | undefined;\n  let body: HTMLBodyElement | undefined;\n\n  const onMouseEnter = () => {\n    setOverSidebar(true);\n  };\n\n  const onMouseLeave = () => {\n    setOverSidebar(false);\n  };\n\n  const closeSidebar = () => {\n    sidebar?.close?.();\n  };\n\n  createEffect(() => {\n    overSidebar()\n      ? body?.removeEventListener('click', closeSidebar)\n      : body?.addEventListener('click', closeSidebar);\n  });\n\n  onMount(() => {\n    body = document.getElementsByTagName('body')[0];\n    body?.addEventListener('click', closeSidebar);\n    ref?.addEventListener('mouseenter', onMouseEnter);\n    ref?.addEventListener('mouseleave', onMouseLeave);\n  });\n\n  onCleanup(() => {\n    ref?.removeEventListener('mouseEnter', onMouseEnter);\n    ref?.removeEventListener('mouseleave', onMouseLeave);\n  });\n\n  return (\n    <div\n      {...rest}\n      ref={ref}\n      classList={{\n        ...local.classList,\n        sidebar: true,\n        show: sidebar?.active?.() === true,\n      }}\n    />\n  );\n};\n";

export { index as default };
