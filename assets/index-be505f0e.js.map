{"version":3,"file":"index-be505f0e.js","sources":["../../src/implementations/ConditionalValidationForm/yup/index.tsx?raw"],"sourcesContent":["export default \"import { Checkbox, TextInput } from '@components';\\nimport { useFormHandler } from 'solid-form-handler';\\nimport { yupSchema } from 'solid-form-handler/yup';\\nimport { Component, createEffect, Match, Show, Switch } from 'solid-js';\\nimport { createStore } from 'solid-js/store';\\nimport { schema } from './schema';\\n\\nexport const Form: Component = () => {\\n  const formHandler = useFormHandler(yupSchema(schema));\\n  const { formData } = formHandler;\\n  const [store, setStore] = createStore({ isAdult: 0, email: 0 });\\n\\n  const submit = async (event: Event) => {\\n    event.preventDefault();\\n    try {\\n      await formHandler.validateForm();\\n      alert(JSON.stringify(formData()));\\n      formHandler.resetForm();\\n    } catch (error) {\\n      console.error(error);\\n    }\\n  };\\n\\n  const reset = async () => {\\n    await formHandler.resetForm();\\n  };\\n\\n  const fill = () => {\\n    formHandler.fillForm(\\n      { email: '', isAdult: true },\\n      { silentValidation: false }\\n    );\\n  };\\n\\n  createEffect(() => {\\n    formHandler.isFieldValidating('isAdult') &&\\n      setStore((prev) => ({ ...prev, isAdult: prev.isAdult + 1 }));\\n  });\\n\\n  createEffect(() => {\\n    formHandler.isFieldValidating('email') &&\\n      setStore((prev) => ({ ...prev, email: prev.email + 1 }));\\n  });\\n\\n  return (\\n    <form onSubmit={submit}>\\n      <h4 class=\\\"mb-3\\\">Using yup schema</h4>\\n      <div class=\\\"row gy-3\\\">\\n        <div class=\\\"col-sm-12\\\">\\n          <Checkbox\\n            label=\\\"Is Adult\\\"\\n            name=\\\"isAdult\\\"\\n            checked={false}\\n            formHandler={formHandler}\\n            triggers={['email']}\\n          />\\n        </div>\\n        <Show when={formData().isAdult}>\\n          <div class=\\\"col-sm-12\\\">\\n            <TextInput label=\\\"Email\\\" name=\\\"email\\\" formHandler={formHandler} />\\n          </div>\\n        </Show>\\n      </div>\\n      <div class=\\\"mb-3 w-100\\\">\\n        <button class=\\\"btn btn-primary me-2 mt-2\\\">Submit</button>\\n        <button\\n          class=\\\"btn btn-primary me-2 mt-2\\\"\\n          disabled={formHandler.isFormInvalid()}\\n        >\\n          Submit\\n        </button>\\n        <button class=\\\"btn btn-primary me-2 mt-2\\\" onClick={fill} type=\\\"button\\\">\\n          Fill\\n        </button>\\n        <button class=\\\"btn btn-primary me-2 mt-2\\\" onClick={reset} type=\\\"button\\\">\\n          Reset\\n        </button>\\n      </div>\\n      <div>\\n        <Switch>\\n          <Match when={!formHandler.isFormInvalid()}>\\n            <span class=\\\"text-success\\\">Form is valid</span>\\n          </Match>\\n          <Match when={formHandler.isFormInvalid()}>\\n            <span class=\\\"text-danger\\\">Form is invalid</span>\\n          </Match>\\n        </Switch>\\n      </div>\\n      <p class=\\\"mt-5\\\">\\n        <b>Form data:</b>\\n      </p>\\n      <pre class=\\\"border bg-light p-3\\\">\\n        <code>{JSON.stringify(formData(), null, 2)}</code>\\n      </pre>\\n      <p class=\\\"mt-5\\\">\\n        <b>Times validated:</b>\\n      </p>\\n      <pre class=\\\"border bg-light p-3\\\">\\n        <code>{JSON.stringify(store, null, 2)}</code>\\n      </pre>\\n    </form>\\n  );\\n};\\n\""],"names":["index"],"mappings":"AAAA,MAAAA,EAAe}