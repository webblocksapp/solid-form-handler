const index = "import { FormHandler } from '@interfaces';\nimport SuidCheckbox, { CheckboxTypeMap } from '@suid/material/Checkbox';\nimport { Component, createEffect, createUniqueId, splitProps } from 'solid-js';\nimport { createStore } from 'solid-js/store';\nimport FormHelperText from '@suid/material/FormHelperText';\nimport FormControlLabel from '@suid/material/FormControlLabel';\n\ntype SuidCheckboxProps = CheckboxTypeMap['props'] &\n  CheckboxTypeMap['selfProps'];\n\nexport type CheckboxProps = SuidCheckboxProps & {\n  error?: boolean;\n  errorMessage?: string;\n  formHandler?: FormHandler;\n  helperText?: string;\n  label?: string;\n  uncheckedValue?: string | number;\n  triggers?: string[];\n};\n\nexport const Checkbox: Component<CheckboxProps> = (props) => {\n  /**\n   * Props are divided in two groups:\n   * - local: newer or extended/computed props.\n   * - rest: remaining inherited props applied to the original component.\n   */\n  const [local, rest] = splitProps(props, [\n    'checked',\n    'error',\n    'errorMessage',\n    'formHandler',\n    'helperText',\n    'id',\n    'label',\n    'onBlur',\n    'onChange',\n    'uncheckedValue',\n    'triggers',\n  ]);\n\n  /**\n   * Derived/computed states from props.\n   */\n  const [store, setStore] = createStore({\n    errorMessage: '',\n    error: false,\n    id: '',\n    checked: false,\n  });\n\n  /**\n   * Extended onInput event.\n   */\n  const onChange: CheckboxProps['onChange'] = (event, checked) => {\n    //Form handler prop sets and validate the value onInput.\n    local.formHandler?.setFieldValue?.(rest.name, getValue(checked), {\n      validateOn: [event.type],\n    });\n    setStore('checked', checked);\n\n    //onChange prop is preserved\n    local?.onChange?.(event, checked);\n  };\n\n  /**\n   * Extended onBlur event.\n   */\n  const onBlur: CheckboxProps['onBlur'] = (event) => {\n    //Form handler prop validate and touch the field.\n    local.formHandler?.validateField?.(rest.name, { validateOn: [event.type] });\n    local.formHandler?.touchField?.(rest.name);\n\n    //onBlur prop is preserved\n    if (typeof local.onBlur === 'function') {\n      local.onBlur(event);\n    } else {\n      local.onBlur?.[0](local.onBlur?.[1], event);\n    }\n  };\n\n  /**\n   * Helper method for getting the value when checked.\n   * - If no value prop is provided, checked flag is used as value.\n   * - If value prop is provided, it's used as value\n   * - If value and uncheckedValue prop are provided, uncheckedValue is used when checkbox is not checked.\n   */\n  const getValue = (checked?: boolean) => {\n    if (rest.value === undefined) return checked;\n    if (checked) return rest.value;\n    return local.uncheckedValue || '';\n  };\n\n  /**\n   * Computes the checked status.\n   * - If value is provided, it's compared with form handler value.\n   * - If no value prop is provided, it's used the boolean flag stored at form handler.\n   * - If checked prop is provided, it's used (controlled from outside)\n   */\n  createEffect(() => {\n    setStore(\n      'checked',\n      local.formHandler?.getFieldValue?.(rest.name) == rest.value ||\n        (rest.value === undefined &&\n          local.formHandler?.getFieldValue?.(rest.name)) ||\n        (local.checked ?? false)\n    );\n  });\n\n  /**\n   * Updates error message signal according to the given prop or form handler state.\n   */\n  createEffect(() => {\n    setStore(\n      'errorMessage',\n      local.errorMessage || local.formHandler?.getFieldError?.(rest.name) || ''\n    );\n  });\n\n  /**\n   * Updates error flag signal according to the given prop or form handler state.\n   */\n  createEffect(() => {\n    setStore(\n      'error',\n      local.error || local.formHandler?.fieldHasError?.(rest.name) || false\n    );\n  });\n\n  /**\n   * Initializes the form field unique id.\n   */\n  createEffect(() => {\n    setStore('id', local.id || createUniqueId());\n  });\n\n  /**\n   * Initializes the form field default value.\n   */\n  createEffect(() => {\n    local.formHandler?.setFieldDefaultValue?.(\n      rest.name,\n      getValue(local.checked)\n    );\n  });\n\n  /**\n   * Triggers dependant validations\n   */\n  createEffect(() => {\n    local?.formHandler?.setFieldTriggers?.(rest.name, local.triggers);\n  });\n\n  return (\n    <div>\n      <FormControlLabel\n        control={\n          <SuidCheckbox\n            {...rest}\n            checked={store.checked}\n            id={store.id}\n            onChange={onChange}\n            onBlur={onBlur}\n          />\n        }\n        label={local.label}\n      />\n      {local.helperText && <FormHelperText>{local.helperText}</FormHelperText>}\n      {store.error && (\n        <FormHelperText error={store.error}>\n          {store.errorMessage}\n        </FormHelperText>\n      )}\n    </div>\n  );\n};\n";

export { index as default };
