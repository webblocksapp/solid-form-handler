{"version":3,"file":"index-f3abb1c5.js","sources":["../../src/components/Select/index.tsx?raw"],"sourcesContent":["export default \"import { FieldProps, Field } from 'solid-form-handler';\\nimport {\\n  Component,\\n  createEffect,\\n  createSignal,\\n  For,\\n  JSX,\\n  Show,\\n  splitProps,\\n} from 'solid-js';\\n\\ntype SelectableOption = { value: string | number; label: string };\\n\\nexport type SelectProps = JSX.SelectHTMLAttributes<HTMLSelectElement> &\\n  FieldProps & {\\n    label?: string;\\n    options?: Array<SelectableOption>;\\n    placeholder?: string;\\n  };\\n\\nexport const Select: Component<SelectProps> = (props) => {\\n  const [local, rest] = splitProps(props, [\\n    'placeholder',\\n    'options',\\n    'label',\\n    'classList',\\n    'class',\\n    'formHandler',\\n  ]);\\n  const [options, setOptions] = createSignal<SelectableOption[]>([]);\\n\\n  /**\\n   * Computes the select options by using the placeholder and options props.\\n   */\\n  createEffect(() => {\\n    setOptions(() => [\\n      ...(local.placeholder ? [{ value: '', label: local.placeholder }] : []),\\n      ...(local.options || []),\\n    ]);\\n  });\\n\\n  return (\\n    <Field\\n      {...props}\\n      mode=\\\"input\\\"\\n      render={(field) => (\\n        <div class={local.class} classList={local.classList}>\\n          <Show when={local.label}>\\n            <label class=\\\"form-label\\\" for={field.props.id}>\\n              {local.label}\\n            </label>\\n          </Show>\\n          <select\\n            {...rest}\\n            {...field.props}\\n            class=\\\"form-select\\\"\\n            classList={{ 'is-invalid': field.helpers.error }}\\n          >\\n            <For each={options()}>\\n              {(option) => (\\n                <option\\n                  value={option.value}\\n                  selected={option.value == field.props.value}\\n                >\\n                  {option.label}\\n                </option>\\n              )}\\n            </For>\\n          </select>\\n          <Show when={field.helpers.error}>\\n            <div class=\\\"invalid-feedback\\\">{field.helpers.errorMessage}</div>\\n          </Show>\\n        </div>\\n      )}\\n    />\\n  );\\n};\\n\""],"names":["index"],"mappings":"AAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}