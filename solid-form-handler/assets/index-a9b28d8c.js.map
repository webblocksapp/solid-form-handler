{"version":3,"file":"index-a9b28d8c.js","sources":["../../src/implementations/SingleSelectForm/zod/index.tsx?raw"],"sourcesContent":["export default \"import { Component, For, Show } from 'solid-js';\\nimport { Field, useFormHandler } from 'solid-form-handler';\\nimport { zodSchema } from 'solid-form-handler/zod';\\nimport { z } from 'zod';\\n\\nconst schema = z.object({\\n  country: z.coerce.number().min(1, 'country is required'),\\n});\\n\\nconst countries = [\\n  { value: '', label: 'Select a country' },\\n  { value: 1, label: 'Colombia' },\\n  { value: 2, label: 'Argentina' },\\n  { value: 3, label: 'Venezuela' },\\n];\\n\\nexport const Form: Component = () => {\\n  const formHandler = useFormHandler(zodSchema(schema));\\n  const { formData } = formHandler;\\n\\n  const submit = async (event: Event) => {\\n    event.preventDefault();\\n    try {\\n      await formHandler.validateForm();\\n      alert('Data sent with success: ' + JSON.stringify(formData()));\\n      formHandler.resetForm();\\n    } catch (error) {\\n      console.error(error);\\n    }\\n  };\\n\\n  const reset = () => {\\n    formHandler.resetForm();\\n  };\\n\\n  const fill = () => {\\n    formHandler.fillForm({ country: 2 });\\n  };\\n\\n  return (\\n    <form autocomplete=\\\"off\\\" onSubmit={submit}>\\n      <h4 class=\\\"mb-3\\\">Using zod schema</h4>\\n      <div class=\\\"mb-3\\\">\\n        <Field\\n          mode=\\\"input\\\"\\n          name=\\\"country\\\"\\n          formHandler={formHandler}\\n          render={(field) => (\\n            <>\\n              <label class=\\\"form-label\\\" for={field.props.id}>\\n                Country\\n              </label>\\n              <select\\n                {...field.props}\\n                class=\\\"form-select\\\"\\n                classList={{ 'is-invalid': field.helpers.error }}\\n              >\\n                <For each={countries}>\\n                  {(country) => (\\n                    <option\\n                      value={country.value}\\n                      selected={country.value == field.props.value}\\n                    >\\n                      {country.label}\\n                    </option>\\n                  )}\\n                </For>\\n              </select>\\n              <Show when={field.helpers.error}>\\n                <div class=\\\"invalid-feedback\\\">{field.helpers.errorMessage}</div>\\n              </Show>\\n            </>\\n          )}\\n        />\\n      </div>\\n      <div class=\\\"mb-3\\\">\\n        <button class=\\\"btn btn-primary me-2\\\">Submit</button>\\n        <button class=\\\"btn btn-primary me-2\\\" onClick={reset} type=\\\"button\\\">\\n          Reset\\n        </button>\\n        <button class=\\\"btn btn-primary me-2\\\" onClick={fill} type=\\\"button\\\">\\n          Fill\\n        </button>\\n      </div>\\n      <p>\\n        <b>Form data:</b>\\n      </p>\\n      <pre class=\\\"mt-3 border bg-light p-3\\\">\\n        <code>{JSON.stringify(formData(), null, 2)}</code>\\n      </pre>\\n    </form>\\n  );\\n};\\n\""],"names":["index"],"mappings":"AAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}